/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var c=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var C=Object.prototype.hasOwnProperty;var w=(t,n,e)=>n in t?c(t,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[n]=e;var b=(t,n)=>{for(var e in n)c(t,e,{get:n[e],enumerable:!0})},$=(t,n,e,s)=>{if(n&&typeof n=="object"||typeof n=="function")for(let a of x(n))!C.call(t,a)&&a!==e&&c(t,a,{get:()=>n[a],enumerable:!(s=v(n,a))||s.enumerable});return t};var S=t=>$(c({},"__esModule",{value:!0}),t);var g=(t,n,e)=>(w(t,typeof n!="symbol"?n+"":n,e),e);var k={};b(k,{default:()=>h});module.exports=S(k);var o=require("obsidian");var T={enableDefaultPasteConversion:!0},h=class extends o.Plugin{constructor(){super(...arguments);g(this,"settings")}async loadSettings(){this.settings=Object.assign({},T,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async onload(){await this.loadSettings(),this.addSettingTab(new p(this.app,this)),this.registerEvent(this.app.workspace.on("editor-paste",async(e,s)=>{var u;let a=((u=e.clipboardData)==null?void 0:u.getData("text"))||"",i=a.trim(),r=/^https?:\/\/\S+$/.test(i),l=/^\[.*?\]\(.*?\)$/.test(i);if(!(r||l)&&this.settings.enableDefaultPasteConversion&&a){e.preventDefault();let f=d(a);s.replaceSelection(f)}})),this.addCommand({id:"paste-katex-to-mathjax",name:"Paste with conversion",editorCallback:e=>{navigator.clipboard.readText().then(s=>{let a=d(s);e.replaceSelection(a)})}}),this.addCommand({id:"convert-editor-text-from",name:"Convert current text file",editorCallback:e=>{let s=e.getValue(),a=d(s);e.setValue(a)}}),this.addCommand({id:"convert-all-files-from",name:"Convert all files",callback:async()=>{let e=this.app.vault.getMarkdownFiles();for(let s of e){let a=await this.app.vault.read(s),i=d(a);await this.app.vault.modify(s,i)}new o.Notice("Text in the whole vault is converted from KaTeX to MathJax format!")}})}};function d(t){let n=/^https?:\/\/\S+$/.test(t.trim()),e=/^\[.*?\]\(.*?\)$/.test(t.trim()),s=/^https?:\/\/[^\s\[]+\[.*?\]\(.*?\)/.test(t.trim());if(n||e||s)return t;let a=/https?:\/\/[^\s)]+/g,i=[],r=0;for(let l of t.matchAll(a))l.index>r&&i.push(m(t.slice(r,l.index))),i.push(l[0]),r=l.index+l[0].length;return r<t.length&&i.push(m(t.slice(r))),D(i.join(""))}function D(t){return t.replace(/(?:^|\n)[ \t]*\n[ \t]*(?=\$\$)/g,`
`).replace(/(?<=\$\$)\n[ \t]*\n/g,`
`)}function m(t){return t=t.replace(/\\\((.*?)\\\)/g,(n,e)=>`$${e.trim()}$`),t=t.replace(/\\\[(.*?)\\\]/gs,(n,e)=>`
$$
${e.trim()}
$$
`),t}var p=class extends o.PluginSettingTab{constructor(e,s){super(e,s);g(this,"plugin");this.plugin=s}display(){let{containerEl:e}=this;e.empty(),new o.Setting(e).setName("Enable default paste conversion").setDesc("Automatically converts KaTeX to MathJax on paste action.").addToggle(s=>s.setValue(this.plugin.settings.enableDefaultPasteConversion).onChange(async a=>{this.plugin.settings.enableDefaultPasteConversion=a,await this.plugin.saveSettings()}))}};

/* nosourcemap */